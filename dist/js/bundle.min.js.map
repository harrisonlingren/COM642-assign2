{"version":3,"sources":["cards.js","modal.js","nav-icons.js","search.js","settings.js","nav.js"],"names":["loadTodoCards","$","getJSON","res","each","data","idx","item","createNewCard","todoItemsData","push","initCardEvents","_this","this","container","sortable","handle","update","index","elem","click","e","todoItemId","currentTarget","parent","attr","parseInt","length","itemDone","is","ajax","url","type","done","success","editSuccess","error","console","toggleClass","checked","thisCard","result","status","response","remove","splice","alerts","val","cardTitle","text","title","cardText","description","cardLabel","item_id","cardBox","parseBoolean","addClass","cardClose","append","cardEdit","card","b","getCards","buildArray","number","cardsArray","daysLeft","day","today","Date","Math","round","empty","i","log","date","span","div","a","li","divider","filterCards","filterTerm","mode","results","todoItem","includes","category","document","ready","on","event","relatedTarget","d","toISOString","substring","saveBtn","editMode","todoItemData","hide","setTemplate","animate","width","margin-left","show","keypress","keyCode","which","target","parse"],"mappings":"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","file":"bundle.min.js","sourcesContent":["$(document).ready( () => {\n    // load cards\n    loadTodoCards();\n});\n\nconst todoItemsData = [];\n\nfunction loadTodoCards() {\n    // GET endpoint for all to-do items\n    $.getJSON('/item/all', (res) => {\n        // iterate over array of to-do items and insert '.card' elements\n        $.each(res.data, (idx, item) => {\n            createNewCard(item);\n            todoItemsData.push(item);\n        });\n\n        initCardEvents();\n    });\n}\n\nfunction initCardEvents() {\n    let container = $('.cardContainer');\n\n    // make cards draggable\n    container.sortable({\n        handle: '.card-title',\n        update: () => {\n            $('.card', container).each((index, elem) => {\n                let cardItem = $(elem),\n                    newIndex = cardItem.index();\n            });\n        }\n    });\n\n    // clicking checkbox crosses out text/title\n    $('.card input[type=\"checkbox\"]').click((e) => {\n        \n        let todoItemId = $(e.currentTarget).parent().attr('id');\n        todoItemId = parseInt( todoItemId[ todoItemId.length-1] );\n        \n        let itemDone = $('#todo'+todoItemId+' input[type=\"checkbox\"]').is(':checked');\n        $.ajax({\n            url: '/item/'+todoItemId,\n            type: 'PUT',\n            data: { done: itemDone },\n            success: editSuccess,\n            error: () => {\n                console.error('Could not change to-do item status to ' + itemDone);\n                $('#todo'+todoItemId+' .card-title, #todo'+todoItemId+' .card-text').toggleClass('done');\n                $(this).attr('checked', this.checked);\n            }\n        });\n\n        $('#todo'+todoItemId+' .card-title, #todo'+todoItemId+' .card-text').toggleClass('done');\n    });\n\n    // Card delete button\n    $('.card .btn.btn-danger').click((e) => {\n        let thisCard = $(e.currentTarget).parent();\n        let todoItemId = thisCard.attr('id');\n        todoItemId = parseInt( todoItemId[ todoItemId.length-1] );\n\n        $.ajax({\n            url: '/item/' + todoItemId,\n            type: 'DELETE',\n            success: (result, status, response) => {\n                thisCard.remove();\n                todoItemsData.splice(todoItemId, 1);\n                alerts();\n            },\n            error: (result, status, response) => {\n                console.error(response);\n            }\n        });\n    });\n\n    // FAB for creating new to-do item\n    $('#new-item').click(() => {\n        $('#edit-modal button.btn-primary').attr('data-editmode', 'new');\n\n        // reset modal form inputs\n        $('#item-title').val('');\n        $('#item-category').val('');\n        $('#item-date').val('');\n        $('#item-description').val('');\n        $('#edit-modal button.btn-primary').attr('');\n    });\n\n    // edit buttons on cards\n    $('.edit-btn').click(() => {\n        $('#edit-modal button.btn-primary').attr('data-editmode', 'edit');\n    });\n}\n\nfunction createNewCard(item) {\n    let container = $('.cardContainer');\n    \n    let cardTitle = $('<h4 class=\"card-title\"></h4>').text(item.title);\n    let cardText = $('<p class=\"card-text\"></p>').text(item.description);\n    let cardLabel = $('<label>Completed</label>')\n        .attr('for', 'todo'+item.item_id) ;\n    let cardBox = $('<input type=\"checkbox\" />').attr('checked', parseBoolean(item.done));\n    if (parseBoolean(item.done)) {\n        cardTitle.addClass('done'); cardText.addClass('done');\n    }\n    let cardClose = $('<button class=\"btn btn-circle btn-danger\" type=\"button\"></button>')\n        .append('<i class=\"fa fa-times\"></i>');\n\n    let cardEdit = $('<button class=\"btn btn-circle btn-info edit-btn\" type=\"button\"></button>')\n        .attr('data-toggle', 'modal')\n        .attr('data-target', '#edit-modal')\n        .attr('data-todoid', item.item_id)\n        .append('<i class=\"fa fa-pencil\"></i>');\n\n    let card = $('<div class=\"card\"></div>')\n        .attr('id', 'todo'+item.item_id)\n        .append(cardTitle)\n        .append(cardClose)\n        .append(cardEdit)\n        .append(cardText)\n        .append(cardLabel)\n        .append(cardBox);\n\n    container.append(card);\n}\n\nfunction parseBoolean(b) {\n    return (b == 'true' || b == true);\n}\n\n\n\n","$(document).ready(() => {\n    \n    // change edit modal content based on the task that was clicked\n    let modal = $('#edit-modal');\n    modal.on('show.bs.modal', (event) => {\n        let btn = $(event.relatedTarget);\n        let todoItemId = btn.data('todoid');\n\n        // if editing, get card details from cached data\n        if (todoItemId) {\n            let todoItem = todoItemsData[todoItemId];\n            let d = new Date(todoItem.date);\n            d = d.toISOString().substring(0,10);\n            $('#item-title').val(todoItem.title);\n            $('#item-category').val(todoItem.category);\n            $('#item-date').val( d );\n            $('#item-description').val(todoItem.description);\n            $('#edit-modal button.btn-primary').attr('data-todoid', todoItemId);\n        }        \n    });\n\n    let saveBtn = $('#edit-modal button.btn-primary');\n    saveBtn.click(() => {\n\n        let editMode = saveBtn.data('editmode');\n        let todoItemId = saveBtn.data('todoid');\n\n        if (editMode == 'edit') {\n            // ajax call to update task\n\n            let d = new Date( $('#item-date').val() );\n            let todoItemData = {\n                title: $('#item-title').val(),\n                category: $('#item-category').val(),\n                date: d,\n                done: ( $('#todo'+todoItemId+' input[type=\"checkbox\"]').is(':checked') ),\n                description: $('#item-description').val()\n            };\n\n            $.ajax({\n                url: '/item/' + todoItemId,\n                type: 'PUT',\n                data: todoItemData,\n                success: editSuccess\n            });\n\n        } else if (editMode == 'new') {\n            // ajax call to add new task\n\n            let d = new Date( $('#item-date').val() );\n            let todoItemData = {\n                title: $('#item-title').val(),\n                category: $('#item-category').val(),\n                date: d,\n                done: ( $('#todo'+todoItemId+' input[type=\"checkbox\"]').is(':checked') ),\n                description: $('#item-description').val()\n            };\n\n            $.ajax({\n                url: '/item/new',\n                type: 'POST',\n                data: todoItemData,\n                success: (result, status, response) => {\n                    if (response.status == 201) {\n                        createNewCard(result.data);\n                    } else {\n                        console.error('Could not edit to-do item!');\n                    }\n                }\n            });\n\n        } else {\n            console.error('No edit mode specified!');\n        }\n    });\n});\n\n\nfunction editSuccess(result, status, response) {\n    if (response.status == 200) {\n        let todoItemId = result.data.item_id;\n        $('#todo'+todoItemId+' .card-title').text(result.data.title);\n        $('#todo'+todoItemId+' .card-text').text(result.data.description);\n        $('#todo'+todoItemId+' input[type=\"checkbox\"]').attr('checked', result.data.done);\n    } else {\n        console.error('Could not edit to-do item!');\n    }\n}","$(document).ready( () => {\n    getCards();\n    $(\".settings-panel\").hide();\n    $('i.fa-bell').parent().click( () => { alerts();\n    });\n    $(\"button.btn.btn-primary.save-template\").parent().click( () => { setTemplate(); });\n});\n\nfunction getCards() {\n    // GET endpoint for all to-do items\n    $.getJSON('/item/all', (res) => {\n        // iterate over array of to-do items and insert '.card' elements\n        $.each(res.data, (idx, item) => {\n            buildArray(item);\n        }); number(); alerts();        \n    });\n}\n\nfunction number() {\n    var length = cardsArray.length;\n    $(\"span.top-label.label.label-warning\").text(length);\n}\n\nfunction daysLeft(day) {\n    let today = new Date();\n    day = new Date(day);\n    let dayInMS = 1000*60*60*24;\n    return Math.round( (day - today) / dayInMS );\n}\n\nfunction alerts() {\n    $('.dropdown-alerts').empty();\n    $.each(cardsArray, (idx, item) => {\n        var i = $('<i class=\"fa fa-tasks fa-fw\"></i>');\n        console.log(item.date);\n        var span = $('<span class=\"pull-right text-muted small\"></span>').text( daysLeft(item.date) + ' days left');\n        var div = $('<div></div>').append(i).append(item.title).append(span);\n        var a = $('<a href=\"#\"></a>').append(div);\n        var li = $('<li></li>').append(a);\n        var divider = $('<li class=\"divider\"></li>');\n        $(\"ul.dropdown-menu.dropdown-alerts\").append(li).append(divider);\n    });\n}\n\nvar cardsArray = [];\nfunction buildArray(item) {\n    cardsArray.push(item);\n}","$(document).ready( () => {\n    // if search button clicked, filter by search term\n    $('.sidebar-search .btn.btn-default').click( () => {\n        let search = $('.sidebar-search input[type=\"text\"]').val();\n        filterCards(search, 'search');\n    });\n\n    // if Enter key pressed in search box, do search\n    $('.sidebar-search input[type=\"text\"]').keypress((e) => {\n        let code = (e.keyCode ? e.keyCode : e.which);        \n        if (code == 13) {\n            $('.sidebar-search .btn.btn-default').click();\n        }\n    });\n\n    // if category button clicked, filter by category\n    $('.categories button').click((e) => {\n        let category = $(e.target).text();\n        if (category == 'All tasks') { filterCards('', 'all'); return; }\n        filterCards(category, 'category');\n    });\n});\n\nfunction filterCards(filterTerm, mode) {\n    // add todo items that match the search term to the result\n    let results = [];\n    $.each(todoItemsData, (idx, todoItem) => {\n        // search based on term\n        if (mode == 'search') {\n            if (todoItem.title.includes(filterTerm) || todoItem.description.includes(filterTerm)) {\n                results.push(todoItem);\n            }\n\n        // filter based on category\n        } else if (mode == 'category') {\n            if (todoItem.category == filterTerm) {\n                results.push(todoItem);\n            }\n        } else if (mode == 'all') {\n            results.push(todoItem);\n        }\n    });\n\n    // clear cards and re-build from filtered results\n    $('.cardContainer').empty();\n    $.each(results, (idx, card) => {\n        createNewCard(card);\n    });\n}","$(document).ready(() => {\n    \n    // change edit modal content based on the task that was clicked\n    let modal = $('#edit-modal');\n    modal.on('show.bs.modal', (event) => {\n        let btn = $(event.relatedTarget);\n        let todoItemId = btn.data('todoid');\n        $.getJSON('/item/'+todoItemId, (res) => {\n            let todoItem = res.data;\n            $('#item-title').val(todoItem.title);\n            $('#item-category').val(todoItem.category);\n            $('#item-date').val( Date.parse(todoItem.date) );\n            $('#item-description').val(todoItem.description);\n            $('#edit-modal button.btn-primary').attr('data-todoid', todoItemId);\n        });\n    });\n\n    let saveBtn = $('#edit-modal button.btn-primary');\n    saveBtn.click(() => {\n\n        let editMode = saveBtn.data('editmode');\n        let todoItemId = saveBtn.data('todoid');\n\n        if (editMode == 'edit') {\n            // ajax call to update task\n\n            let d = new Date( $('#item-date').val() );\n            let todoItemData = {\n                title: $('#item-title').val(),\n                category: $('#item-category').val(),\n                date: d,\n                done: ( $('#todo'+todoItemId+' input[type=\"checkbox\"]').is(':checked') ),\n                description: $('#item-description').val()\n            };\n\n            $.ajax({\n                url: '/item/' + todoItemId,\n                type: 'PUT',\n                data: todoItemData,\n                success: editSuccess\n            });\n\n        } else if (editMode == 'new') {\n            // ajax call to add new task\n\n            let d = new Date( $('#item-date').val() );\n            let todoItemData = {\n                title: $('#item-title').val(),\n                category: $('#item-category').val(),\n                date: d,\n                done: ( $('#todo'+todoItemId+' input[type=\"checkbox\"]').is(':checked') ),\n                description: $('#item-description').val()\n            };\n\n            $.ajax({\n                url: '/item/new',\n                type: 'POST',\n                data: todoItemData,\n                success: (result, status, response) => {\n                    if (response.status == 201) {\n                        createNewCard(result.data);\n                    } else {\n                        console.error('Could not edit to-do item!');\n                    }\n                }\n            });\n\n        } else {\n            console.error('No edit mode specified!');\n        }\n    });\n});\n\n\nfunction editSuccess(result, status, response) {\n    if (response.status == 200) {\n        let todoItemId = result.data.item_id;\n        $('#todo'+todoItemId+' .card-title').text(result.data.title);\n        $('#todo'+todoItemId+' .card-text').text(result.data.description);\n        $('#todo'+todoItemId+' input[type=\"checkbox\"]').attr('checked', result.data.done);\n    } else {\n        console.error('Could not edit to-do item!');\n    }\n}","$(document).ready( function() {\n  $(\".navbar-toggle\").click( function() {\n\n    // hide if expanded\n    if ( $('.nav-side').attr('data-collapsed') == 'false') {\n      $(\".nav-side\").animate({'width': '0'});\n      $(\"#page-wrapper\").animate({'margin-left': '0px'});\n      $('.sidebar-collapse').hide();\n      $('.nav-side').attr('data-collapsed', 'true');\n\n    // show if collapsed\n    } else {\n      $(\".nav-side\").animate({'width': '278px'});\n      $(\"#page-wrapper\").animate({'margin-left': '278px'});\n      $('.sidebar-collapse').show();\n      $('.nav-side').attr('data-collapsed', 'false');\n    }\n  });\n});"]}